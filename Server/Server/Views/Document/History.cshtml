@model Server.ViewModels.HistoryViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<table class="title"><tr>
    <td><h1>@Html.DisplayFor(m => m.Title)</h1></td>
    <td><a asp-action="GetDocument">View</a>
    </td>
</tr></table>
<h2>History</h2>
<div id="viewport">
<svg width="960" height="600"></svg>
</div>
@section scripts {
<script src="https://d3js.org/d3.v5.min.js"></script>
<script>
var svg = d3.select("svg"),
 width = +svg.attr("width"),
 height = +svg.attr("height");

var viewModel = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

var nodes_data = []
var links_data = []

for (var i in viewModel.DocumentsInFamily) {
    var documentListing = viewModel.DocumentsInFamily[i];
    nodes_data.push({
        "id":documentListing.Id,
        "name":documentListing.Title
    });
}

for (var i in viewModel.Relations) {
    var relation = viewModel.Relations[i];
    links_data.push({
        "source":relation.AntecedentId,
        "target":relation.DescendantId
    });
}
    
var simulation = d3.forceSimulation().nodes(nodes_data);
    
//we're going to add a charge to each node 
//also going to add a centering force
simulation
    .force("charge_force", d3.forceManyBody())
    .force("center_force", d3.forceCenter(width / 2, height / 2));

    //Create the link force 
//We need the id accessor to use named sources and targets 
var link_force =  d3.forceLink(links_data)
                        .id(function(d) { return d.id; })

    simulation.force("links",link_force)

    
    
var link = svg.append("g")
     .attr("class", "links")
    .selectAll("line")
   .data(links_data)
   .enter().append("line")
    .attr("stroke-width", 2); 
    
var node = svg.append("g")
    .attr("class", "nodes")
   .selectAll("circle")
    .data(nodes_data)
    .enter()
    .append("g");
    
node.append("image")
      .attr("xlink:href", "https://github.com/favicon.ico")
      .attr("x", -8)
      .attr("y", -8)
      .attr("width", 16)
      .attr("height", 16);
    
node.append("text")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function(d) { return d.name });

function tickActions() {    
    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
  }
    
simulation.on("tick", tickActions );


</script>
}